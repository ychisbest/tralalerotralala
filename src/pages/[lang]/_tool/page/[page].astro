---
import { getCollection } from "astro:content";
import Layout from "../../../../layouts/Base.astro";
import { LOCALES, useTranslations, type Lang } from "@/i18n";

const t = useTranslations(Astro.currentLocale as Lang);
const itemsPerPage = 9;

export async function getStaticPaths() {
    const itemsPerPage = 9;
    const tools = await getCollection("tool");
    const totalPages = Math.ceil(tools.length / itemsPerPage);
    return Object.keys(LOCALES).flatMap((lang) => 
    Array.from({length: totalPages}, (_, i) => ({
      params: { 
        lang,
        page: (i + 1).toString()
      }
    }))
  );
}
const tools = (await getCollection("tool")).map(tool => tool.data);
const currentPage = Number(Astro.params.page) || 1;

const startIndex = (currentPage - 1) * itemsPerPage;
const currentTools = tools.slice(startIndex, startIndex + itemsPerPage);
const totalPages = Math.ceil(tools.length / itemsPerPage);

const currentLang = Astro.params.lang|| "en";
---

<Layout title="Tools - CoolNameMaker" description="coolnamemaker tools list">
    <main class="min-h-screen bg-white dark:bg-gray-900">
        <div class="container mx-auto px-4 py-16">
            <h1 class="text-3xl font-bold mb-12 text-center">
                <span
                    class="bg-gradient-to-r from-blue-500 to-purple-600 bg-clip-text text-transparent"
                >
                    Name Generator Tools
                </span>
            </h1>

            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {
                    currentTools.map((tool) => (
                        <a
                            href={`/tool/${tool.slug}`}
                            class="group bg-white dark:bg-gray-800 p-6 rounded-lg border border-gray-100 dark:border-gray-700 shadow-sm hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300 relative overflow-hidden"
                            style="animation-delay: calc(0.05s * Math.random());"
                        >
                            {/* Hover effect - top border glow */}
                            <div class="absolute inset-x-0 top-0 h-0.5 bg-gradient-to-r from-blue-500 to-purple-600 transform origin-left scale-x-0 group-hover:scale-x-100 transition-transform duration-500 ease-out" />

                            {/* Icon with subtle floating animation */}
                            <div class="text-4xl mb-4 text-gray-800 dark:text-gray-200 group-hover:text-blue-500 transition-colors duration-300">
                                {tool.icon}
                            </div>

                            <h2 class="text-xl font-medium mb-3 text-gray-800 dark:text-gray-200 group-hover:text-blue-500 transition-colors">
                                {tool.name[currentLang]}
                            </h2>

                            <p class="text-gray-600 dark:text-gray-400 text-sm line-clamp-3 mb-4">
                                {tool.description[currentLang]}
                            </p>

                            <div class="flex items-center text-sm text-blue-500 mt-auto opacity-0 group-hover:opacity-100 transform group-hover:translate-x-1 transition-all duration-300">
                                <span>
                                    {t({
                                      en: "Try it",
                                      es: "Pruébalo",
                                      ar: "جربها",
                                      pt: "Experimente",
                                      fr: "Essayez",
                                      ru: "Попробуйте",
                                      "zh-cn": "试试看",
                                      ja: "試してみる"
                                    })}
                                </span>
                                <svg
                                    class="w-4 h-4 ml-1"
                                    fill="none"
                                    stroke="currentColor"
                                    viewBox="0 0 24 24"
                                >
                                    <path
                                        stroke-linecap="round"
                                        stroke-linejoin="round"
                                        stroke-width="2"
                                        d="M14 5l7 7m0 0l-7 7m7-7H3"
                                    />
                                </svg>
                            </div>
                        </a>
                    ))
                }
            </div>

            {/* Pagination with Notion-style */}
            <div class="flex justify-center mt-12 gap-1.5">
                {/* First page button */}
                {
                    currentPage > 1 && (
                        <a
                            href="/tool/page/1"
                            class="p-2 rounded hover:bg-gray-100 dark:hover:bg-gray-800 text-gray-600 dark:text-gray-400 transition-colors"
                            aria-label="First page"
                        >
                            <svg
                                xmlns="http://www.w3.org/2000/svg"
                                class="h-5 w-5"
                                fill="none"
                                viewBox="0 0 24 24"
                                stroke="currentColor"
                            >
                                <path
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                    stroke-width="1.5"
                                    d="M11 19l-7-7 7-7m8 14l-7-7 7-7"
                                />
                            </svg>
                        </a>
                    )
                }

                {/* Page number buttons */}
                {
                    Array.from({ length: totalPages }, (_, i) => i + 1)
                        .filter((page) => {
                            if (page === 1 || page === totalPages) return true;
                            return (
                                Math.abs(currentPage - page) < 2 ||
                                page === currentPage
                            );
                        })
                        .map((page, index, array) => (
                            <>
                                {index > 0 && array[index - 1] !== page - 1 && (
                                    <span class="flex items-center px-2 text-gray-400">
                                        ...
                                    </span>
                                )}
                                <a
                                    href={`/tool/page/${page}`}
                                    class={`w-9 h-9 flex items-center justify-center rounded-full text-sm transition-all duration-200 ${
                                        Number(currentPage) === Number(page)
                                            ? "bg-blue-50 dark:bg-blue-900/30 text-blue-600 dark:text-blue-400 font-medium"
                                            : "text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-800"
                                    }`}
                                    aria-label={`Page ${page}`}
                                    aria-current={
                                        Number(currentPage) === Number(page)
                                            ? "page"
                                            : undefined
                                    }
                                >
                                    {page}
                                </a>
                            </>
                        ))
                }

                {/* Last page button */}
                {
                    currentPage < totalPages && (
                        <a
                            href={`/tool/page/${totalPages}`}
                            class="p-2 rounded hover:bg-gray-100 dark:hover:bg-gray-800 text-gray-600 dark:text-gray-400 transition-colors"
                            aria-label="Last page"
                        >
                            <svg
                                xmlns="http://www.w3.org/2000/svg"
                                class="h-5 w-5"
                                fill="none"
                                viewBox="0 0 24 24"
                                stroke="currentColor"
                            >
                                <path
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                    stroke-width="1.5"
                                    d="M13 5l7 7-7 7M5 5l7 7-7 7"
                                />
                            </svg>
                        </a>
                    )
                }
            </div>
        </div>
    </main>

    <style is:global>
        /* Add subtle floating animation */
        @keyframes subtle-float {
            0%,
            100% {
                transform: translateY(0);
            }
            50% {
                transform: translateY(-5px);
            }
        }
        .animate-subtle-float {
            animation: subtle-float 3s ease-in-out infinite;
        }

        /* Card entrance animations */
        @keyframes card-fade-in {
            from {
                opacity: 0;
                transform: translateY(10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        .grid > a {
            animation: card-fade-in 0.5s ease-out forwards;
            opacity: 0;
        }
    </style>
</Layout>
