---
import { LOCALES } from "@/i18n";
import Layout from "../../../layouts/Base.astro";
import { getCollection } from "astro:content";
// 读取datas目录下的所有json文件并合并

// Get the slug from URL params
export async function getStaticPaths() {
    const tools = await getCollection("tool");
    const allTools = tools.map((tool) => tool.data);
    return Object.keys(LOCALES).flatMap((lang) => {
        return allTools.map((tool) => ({
            params: { lang, slug: tool.slug },
            props: { tool }
        }));
    });
}


const { tool } = Astro.props;
const currentLang = Astro.params.lang || "en";

// 将tool声明为全局变量
declare global {
    interface Window {
        tool: any;
    }
}
---

<Layout title={`${tool.name[currentLang]} - CoolNameMaker`} description={tool.description}>
    <main class="min-h-screen bg-[#F7F6F3]">
        <div class="container mx-auto px-4 py-16">
            <div class="max-w-4xl mx-auto">
                <!-- Tool Header -->
                <div class="mb-12 flex items-center bg-white p-6 rounded-xl shadow-md hover:shadow-lg transition-shadow duration-300 border border-gray-100">
                    <div class="text-6xl mr-5 opacity-90">{tool.icon}</div>
                    <div>
                        <h1 class="text-3xl font-bold text-gray-900 mb-1 tracking-tight">
                            {tool.name[currentLang]}
                        </h1>
                        <p class="text-gray-600">
                            {tool.description[currentLang]}
                        </p>
                    </div>
                </div>

                <!-- Tool Content -->
                <div class="bg-white rounded-xl border border-gray-200 mb-10 p-8 shadow-[0_2px_10px_rgba(0,0,0,0.05)] hover:shadow-[0_5px_15px_rgba(0,0,0,0.08)] transition-all duration-300">
                    <div class="max-w-2xl mx-auto">
                        <div class="mb-7">
                            <label
                                class="block text-gray-800 text-sm font-medium mb-2"
                                for="input"
                            >
                                {
                                    {
                                        "en": "Enter a description of what you need names for",
                                        "es": "Ingrese una descripción de para qué necesita nombres",
                                        "ar": "أدخل وصفًا لما تحتاج إلى أسماء له",
                                        "pt": "Insira uma descrição do que você precisa de nomes",
                                        "fr": "Entrez une description de ce pour quoi vous avez besoin de noms",
                                        "ru": "Введите описание того, для чего вам нужны имена",
                                        "zh-cn": "输入您需要名称的描述",
                                        "ja": "名前が必要なものの説明を入力してください"
                                    }[currentLang]
                                }
                            </label>
                            <textarea
                                id="input"
                                class="w-full px-4 py-3 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-gray-500 focus:border-transparent transition-all duration-200 bg-gray-50 min-h-[120px]"
                                placeholder={
                                    {
                                        "en": "e.g. A tech startup focused on AI-powered healthcare solutions",
                                        "es": "ej. Una startup tecnológica centrada en soluciones de salud impulsadas por IA",
                                        "ar": "مثال: شركة ناشئة في مجال التكنولوجيا تركز على حلول الرعاية الصحية المدعومة بالذكاء الاصطناعي",
                                        "pt": "ex. Uma startup de tecnologia focada em soluções de saúde com IA",
                                        "fr": "ex. Une startup technologique axée sur des solutions de santé alimentées par l'IA",
                                        "ru": "например: технологический стартап, ориентированный на решения в области здравоохранения на базе ИИ",
                                        "zh-cn": "例如：专注于 AI 驱动的医疗保健解决方案的科技创业公司",
                                        "ja": "例：AI を活用したヘルスケアソリューションに焦点を当てたテクノロジースタートアップ"
                                    }[currentLang]
                                }
                            >{tool.prompt[currentLang]}</textarea>
                        </div>

                        <div class="flex gap-3">
                            <button
                                id="generate-ai"
                                class="flex-1 bg-black hover:bg-gray-800 text-white font-medium py-3 px-5 rounded-lg transition-all duration-200 transform hover:-translate-y-0.5 active:translate-y-0 shadow-sm hover:shadow flex items-center justify-center"
                            >
                                <span id="generate-ai-text">
                                    {
                                        {
                                            "en": "Generate with AI",
                                            "es": "Generar con IA",
                                            "ar": "توليد باستخدام الذكاء الاصطناعي",
                                            "pt": "Gerar com IA",
                                            "fr": "Générer avec l'IA",
                                            "ru": "Создать с помощью ИИ",
                                            "zh-cn": "使用 AI 生成",
                                            "ja": "AI で生成する"
                                        }[currentLang]
                                    }
                                </span>
                                <svg id="loading-spinner" class="hidden animate-spin ml-2 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                </svg>
                            </button>
                        </div>

                        <div
                            id="result"
                            class="mt-8 p-6 bg-gray-50 border border-gray-200 rounded-lg hidden transform transition-all duration-300 ease-in-out hover:bg-white"
                        >
                            <h2
                                class="text-2xl font-bold text-center mb-3"
                                id="generatedName"
                            >
                            </h2>
                            <p class="text-center text-gray-500 text-sm">
                                {
                                    {
                                        "en": "Click generate again for more names",
                                        "es": "Haga clic en generar nuevamente para más nombres",
                                        "ar": "انقر على توليد مرة أخرى للحصول على المزيد من الأسماء",
                                        "pt": "Clique em gerar novamente para mais nomes",
                                        "fr": "Cliquez à nouveau sur générer pour plus de noms",
                                        "ru": "Нажмите «создать» еще раз для получения дополнительных имен",
                                        "zh-cn": "再次点击生成获取更多名称",
                                        "ja": "もっと名前を生成するにはもう一度生成をクリックしてください"
                                    }[currentLang]
                                }
                            </p>
                        </div>

                        <!-- AI-generated names section -->
                        <div id="ai-results" class="mt-8 hidden">
                            <div class="flex justify-between items-center mb-4">
                                <h2 class="text-xl font-semibold text-gray-800">
                                    {
                                        {
                                            "en": "AI Generated Names",
                                            "es": "Nombres generados por IA",
                                            "ar": "الأسماء التي تم إنشاؤها بواسطة الذكاء الاصطناعي",
                                            "pt": "Nomes Gerados por IA",
                                            "fr": "Noms générés par l'IA",
                                            "ru": "Имена, сгенерированные ИИ",
                                            "zh-cn": "AI 生成的名称",
                                            "ja": "AI生成された名前"
                                        }[currentLang]
                                    }
                                </h2>
                                <button 
                                    id="copy-all-names"
                                    class="text-sm text-gray-500 hover:text-gray-700 transition-colors duration-200 flex items-center px-2 py-1 rounded hover:bg-gray-100"
                                >
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width={2} d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                                    </svg>
                                    {
                                        {
                                            "en": "Copy all",
                                            "es": "Copiar todo",
                                            "ar": "نسخ الكل",
                                            "pt": "Copiar tudo",
                                            "fr": "Tout copier",
                                            "ru": "Копировать все",
                                            "zh-cn": "复制全部",
                                            "ja": "すべてコピー"
                                        }[currentLang]
                                    }
                                </button>
                            </div>
                            <div id="ai-names-list" class="space-y-2">
                                <!-- AI-generated names will be inserted here -->
                            </div>
                        </div>

                        <div id="error-message" class="mt-4 p-3 bg-red-50 text-red-600 rounded-md border border-red-100 animate-fadeIn hidden"></div>
                    </div>
                </div>

                <!-- Introduction Section -->
                <div class="bg-white rounded-xl border border-gray-200 mb-10 p-8 shadow-[0_2px_10px_rgba(0,0,0,0.05)] hover:shadow-[0_5px_15px_rgba(0,0,0,0.08)] transition-all duration-300">
                    <h2 class="text-xl font-bold mb-5 text-gray-900 flex items-center">
                        <span class="text-gray-400 mr-3 text-2xl">📌</span>
                        {
                            {
                                "en": "About This Tool",
                                "es": "Sobre Esta Herramienta",
                                "ar": "حول هذه الأداة",
                                "pt": "Sobre Esta Ferramenta",
                                "fr": "À Propos de Cet Outil",
                                "ru": "Об Этом Инструменте",
                                "zh-cn": "关于此工具",
                                "ja": "このツールについて"
                            }[currentLang]
                        }
                    </h2>
                    <p class="text-gray-700 leading-relaxed">
                        {tool.introduction[currentLang]}
                    </p>
                </div>

                <!-- How to Use Section -->
                <div class="bg-white rounded-xl border border-gray-200 mb-10 p-8 shadow-[0_2px_10px_rgba(0,0,0,0.05)] hover:shadow-[0_5px_15px_rgba(0,0,0,0.08)] transition-all duration-300">
                    <h2 class="text-xl font-bold mb-5 text-gray-900 flex items-center">
                        <span class="text-gray-400 mr-3 text-2xl">🔍</span>
                        {
                            {
                                "en": "How to Use",
                                "es": "Cómo Usar",
                                "ar": "كيفية الاستخدام",
                                "pt": "Como Usar",
                                "fr": "Comment Utiliser",
                                "ru": "Как Использовать",
                                "zh-cn": "如何使用",
                                "ja": "使用方法"
                            }[currentLang]
                        }
                    </h2>
                    <ol class="list-decimal list-inside space-y-3 pl-2 text-gray-700">
                        {
                            tool.howToUse[currentLang].map((step:any) => (
                                <li class="py-1 hover:bg-gray-50 rounded-md px-2 transition-colors duration-200">{step}</li>
                            ))
                        }
                    </ol>
                </div>

                <!-- FAQs Section -->
                <div class="bg-white rounded-xl border border-gray-200 p-8 shadow-[0_2px_10px_rgba(0,0,0,0.05)] hover:shadow-[0_5px_15px_rgba(0,0,0,0.08)] transition-all duration-300">
                    <h2 class="text-xl font-bold mb-6 text-gray-900 flex items-center">
                        <span class="text-gray-400 mr-3 text-2xl">❓</span>
                        {
                            {
                                "en": "Frequently Asked Questions",
                                "es": "Preguntas Frecuentes",
                                "ar": "الأسئلة الشائعة",
                                "pt": "Perguntas Frequentes",
                                "fr": "Questions Fréquemment Posées",
                                "ru": "Часто Задаваемые Вопросы",
                                "zh-cn": "常见问题",
                                "ja": "よくある質問"
                            }[currentLang]
                        }
                    </h2>
                    <div class="space-y-7">
                        {
                            tool.faqs.map((faq:any) => (
                                <div class="border-t border-gray-100 pt-5 first:border-t-0 first:pt-0 hover:bg-gray-50 p-3 rounded-lg -mx-3 transition-colors duration-200">
                                    <h3 class="text-lg font-medium mb-3 text-gray-900">
                                        {faq.question[currentLang]}
                                    </h3>
                                    <p class="text-gray-700 leading-relaxed">
                                        {faq.answer[currentLang]}
                                    </p>
                                </div>
                            ))
                        }
                    </div>
                </div>
            </div>
        </div>
    </main>
</Layout>

<!-- Pass tool data to client script -->
<script define:vars={{ tool }}>
    // Make tool data available globally
    window.tool = tool;
</script>

<script is:inline>
    // 获取DOM元素
    const generateTraditionalBtn = document.getElementById("generate-traditional");
    const generateAiBtn = document.getElementById("generate-ai");
    const generateAiText = document.getElementById("generate-ai-text");
    const loadingSpinner = document.getElementById("loading-spinner");
    const input = document.getElementById("input");
    const result = document.getElementById("result");
    const generatedName = document.getElementById("generatedName");
    const aiResults = document.getElementById("ai-results");
    const aiNamesList = document.getElementById("ai-names-list");
    const errorMessage = document.getElementById("error-message");
    const copyAllNamesBtn = document.getElementById("copy-all-names");

    // Store generated AI names
    let generatedNames = [];
    let copiedIndex = null;

    // 从window对象获取工具数据
    const currentTool = window.tool;
    const prefixes = currentTool.prefixes;
    const suffixes = currentTool.suffixes;

    // 使用AI生成名字
    async function generateAINames() {
        const prompt = input?.value?.trim();
        
        if (!prompt) {
            showError("Please enter a description for the name you want to generate");
            return;
        }
        
        setLoading(true);
        hideError();
        
        try {
            const response = await fetch('https://ai.ych.show', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer ych', 
                },
                body: JSON.stringify({
                    model: "random",
                    messages: [
                        {
                            role: "system", 
                            content: "You are a creative name generator. Generate 5 unique and catchy names based on the description provided. Return only the names as a numbered list without any additional text."
                        },
                        {
                            role: "user", 
                            content: prompt
                        }
                    ],
                    temperature: 0.9,
                    max_tokens: 150
                }),
            });

            const data = await response.json();
            
            if (!response.ok) {
                throw new Error(data.error || 'Failed to generate names');
            }

            const content = data.choices[0].message.content;
            const namesList = content.split('\n')
                .map(line => line.trim())
                .filter(line => line && /^\d+\.?\s+/.test(line))
                .map(line => line.replace(/^\d+\.?\s+/, '').trim());

            if (namesList.length > 0) {
                generatedNames = namesList;
                displayAINames(namesList);
            } else {
                showError('No valid names were generated');
            }
        } catch (err) {
            console.error('Error generating names:', err);
            showError('Failed to generate names. Please try again later.');
        } finally {
            setLoading(false);
        }
    }

    // Display AI-generated names in the UI
    function displayAINames(names) {
        if (!aiNamesList) return;
        
        // Clear previous results
        aiNamesList.innerHTML = '';
        
        // Create and append name elements
        names.forEach((name, index) => {
            const nameDiv = document.createElement('div');
            nameDiv.className = 'p-4 bg-gray-50 rounded-md border border-gray-200 hover:border-gray-300 transition-all duration-200 flex justify-between items-center group';
            nameDiv.style.animationDelay = `${index * 100}ms`;
            
            const nameText = document.createElement('p');
            nameText.className = 'text-gray-800 font-medium';
            nameText.textContent = name;
            
            const copyButton = document.createElement('button');
            copyButton.className = 'text-gray-400 hover:text-gray-600 transition-colors duration-200 p-1 rounded hover:bg-gray-200 opacity-0 group-hover:opacity-100';
            copyButton.setAttribute('aria-label', 'Copy to clipboard');
            copyButton.innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                </svg>
            `;
            
            copyButton.addEventListener('click', () => {
                copyToClipboard(name, index, copyButton);
            });
            
            nameDiv.appendChild(nameText);
            nameDiv.appendChild(copyButton);
            aiNamesList.appendChild(nameDiv);
        });
        
        // Show the results section
        aiResults.classList.remove('hidden');
        result.classList.add('hidden');
    }

    // Copy functionality
    function copyToClipboard(text, index, button) {
        navigator.clipboard.writeText(text).then(() => {
            copiedIndex = index;
            button.innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-green-500" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
                </svg>
            `;
            
            setTimeout(() => {
                if (copiedIndex === index) {
                    button.innerHTML = `
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                        </svg>
                    `;
                    copiedIndex = null;
                }
            }, 2000);
        }).catch(err => {
            console.error('Failed to copy: ', err);
        });
    }

    // Copy all names function
    function copyAllNames() {
        if (generatedNames.length > 0) {
            navigator.clipboard.writeText(generatedNames.join('\n')).then(() => {
                const originalText = copyAllNamesBtn.innerHTML;
                copyAllNamesBtn.innerHTML = `
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1 text-green-500" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
                    </svg>
                    Copied all
                `;
                
                setTimeout(() => {
                    copyAllNamesBtn.innerHTML = originalText;
                }, 2000);
            }).catch(err => {
                console.error('Failed to copy all names: ', err);
            });
        }
    }

    // UI helper functions
    function setLoading(isLoading) {
        const loadingText = {
            "en": "Generating...",
            "es": "Generando...",
            "ar": "جاري التوليد...",
            "pt": "Gerando...",
            "fr": "Génération...",
            "ru": "Создание...",
            "zh-cn": "正在生成...",
            "ja": "生成中..."
        };
        
        const buttonText = {
            "en": "Generate with AI",
            "es": "Generar con IA",
            "ar": "توليد باستخدام الذكاء الاصطناعي",
            "pt": "Gerar com IA",
            "fr": "Générer avec l'IA",
            "ru": "Создать с помощью ИИ",
            "zh-cn": "使用 AI 生成",
            "ja": "AI で生成する"
        };
        
        // Get current language from URL path
        const currentLang = window.location.pathname.split('/')[1] || "en";
        
        if (isLoading) {
            generateAiText.textContent = loadingText[currentLang];
            loadingSpinner.classList.remove('hidden');
            generateAiBtn.disabled = true;
            generateAiBtn.classList.add('opacity-75');
        } else {
            generateAiText.textContent = buttonText[currentLang];
            loadingSpinner.classList.add('hidden');
            generateAiBtn.disabled = false;
            generateAiBtn.classList.remove('opacity-75');
        }
    }

    function showError(message) {
        errorMessage.textContent = message;
        errorMessage.classList.remove('hidden');
    }

    function hideError() {
        errorMessage.classList.add('hidden');
    }


    generateAiBtn?.addEventListener("click", generateAINames);
    
    copyAllNamesBtn?.addEventListener("click", copyAllNames);
</script>
